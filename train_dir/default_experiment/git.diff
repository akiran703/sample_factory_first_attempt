diff --git a/main.py b/main.py
index e69de29..73253b7 100644
--- a/main.py
+++ b/main.py
@@ -0,0 +1,53 @@
+import functools
+
+from sample_factory.algo.utils.context import global_model_factory
+from sample_factory.cfg.arguments import parse_full_cfg, parse_sf_args
+from sample_factory.envs.env_utils import register_env
+from sample_factory.train import run_rl
+
+from sf_examples.vizdoom.doom.doom_model import make_vizdoom_encoder
+from sf_examples.vizdoom.doom.doom_params import add_doom_env_args, doom_override_defaults
+from sf_examples.vizdoom.doom.doom_utils import DOOM_ENVS, make_doom_env_from_spec
+
+
+
+# Registers all the ViZDoom environments
+def register_vizdoom_envs():
+    for env_spec in DOOM_ENVS:
+        make_env_func = functools.partial(make_doom_env_from_spec, env_spec)
+        register_env(env_spec.name, make_env_func)
+        
+#use model provided by     
+def register_vizdoom_models():
+    global_model_factory().register_encoder_factory(make_vizdoom_encoder)
+    
+    
+def register_vizdoom_components():
+    register_vizdoom_envs()
+    register_vizdoom_models()
+    
+    
+# parse the command line args and create a config
+def parse_vizdoom_cfg(argv=None, evaluation=False):
+    parser, _ = parse_sf_args(argv=argv, evaluation=evaluation)
+    # parameters specific to Doom envs
+    add_doom_env_args(parser)
+    # override Doom default values for algo parameters
+    doom_override_defaults(parser)
+    # second parsing pass yields the final configuration
+    final_cfg = parse_full_cfg(parser, argv)
+    return final_cfg
+
+
+if __name__ == '__main__':
+    ## Start the training, this should take around 15 minutes
+    register_vizdoom_components()
+
+    # The scenario is health gathering
+    env = "doom_health_gathering_supreme"
+    cfg = parse_vizdoom_cfg(
+        argv=[f"--env={env}", "--num_workers=8", "--num_envs_per_worker=4", "--train_for_env_steps=4000000"]
+    )
+
+    status = run_rl(cfg)
+    
\ No newline at end of file
